import { Injectable, NotFoundException } from '@nestjs/common';
import { ComplaintService } from '../complaint/complaint.service';
import { StorageService } from '../storage/storage.service';
import axios from 'axios';
import * as path from 'path';
import { randomUUID } from 'crypto';

@Injectable()
export class LineService {
    constructor(
        private complaintService: ComplaintService,
        private storageService: StorageService,
    ) { }

    async notifyGroupAboutComplaint(id: string) {
        const c = await this.complaintService.findById(id);
        if (!c) throw new NotFoundException('Complaint not found');

        const lineDisplayName = c.lineDisplayName || c.lineUserId;
        const mapUrl = c.location
            ? `https://www.google.com/maps/search/?api=1&query=${c.location}`
            : 'https://www.google.com/maps';

        const flexMessage = {
            type: 'flex',
            altText: 'üìå ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà',
            contents: {
                type: 'bubble',
                body: {
                    type: 'box',
                    layout: 'vertical',
                    spacing: 'sm',
                    contents: [
                        {
                            type: 'text',
                            text: `üìå ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${c.id.slice(0, 8)}...`,
                            weight: 'bold',
                            size: 'md',
                            wrap: true,
                        },
                        {
                            type: 'text',
                            text: `üë§ ‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á: ${lineDisplayName}`,
                            size: 'sm',
                            color: '#555555',
                            wrap: true,
                        },
                        {
                            type: 'text',
                            text: `üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${c.phone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`,
                            size: 'sm',
                            color: '#555555',
                            wrap: true,
                        },
                        {
                            type: 'text',
                            text: `üìù ${c.description}`,
                            size: 'sm',
                            color: '#111111',
                            wrap: true,
                        },
                    ],
                },
                footer: {
                    type: 'box',
                    layout: 'vertical',
                    spacing: 'sm',
                    contents: [
                        {
                            type: 'button',
                            style: 'link',
                            height: 'sm',
                            action: {
                                type: 'uri',
                                label: 'üìç ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
                                uri: mapUrl,
                            },
                        },
                        {
                            type: 'button',
                            style: 'primary',
                            height: 'sm',
                            action: {
                                type: 'uri',
                                label: 'üìÑ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                                uri: `${process.env.WEB_BASE_URL}/admin/complaints/${c.id}`,
                            },
                        },
                        {
                            type: 'button',
                            style: 'secondary',
                            height: 'sm',
                            action: {
                                type: 'uri',
                                label: 'üìå ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•',
                                uri: `${process.env.WEB_BASE_URL}/admin/complaints/${c.id}/report`,
                            },
                        },
                        {
                            type: 'spacer',
                            size: 'sm',
                        },
                    ],
                    flex: 0,
                },
            },
        };

        await this.pushMessageToGroup(process.env.LINE_GROUP_ID!, [flexMessage]);

        const userMessage = {
            type: 'flex',
            altText: 'üì¨ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß',
            contents: {
                type: 'bubble',
                body: {
                    type: 'box',
                    layout: 'vertical',
                    spacing: 'sm',
                    contents: [
                        {
                            type: 'text',
                            text: `üìå ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${c.id.slice(0, 8)}...`,
                            weight: 'bold',
                            size: 'md',
                            wrap: true,
                        },
                        {
                            type: 'text',
                            text: 'üì¨ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö üôè',
                            size: 'sm',
                            wrap: true,
                        },
                        {
                            type: 'text',
                            text: `üìù ${c.description}`,
                            size: 'sm',
                            color: '#111111',
                            wrap: true,
                        },
                        {
                            type: 'button',
                            style: 'link',
                            action: {
                                type: 'uri',
                                label: 'üìç ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
                                uri: mapUrl,
                            },
                        },
                    ],
                },
                footer: {
                    type: 'box',
                    layout: 'vertical',
                    spacing: 'sm',
                    contents: [
                        {
                            type: 'button',
                            style: 'primary',
                            action: {
                                type: 'uri',
                                label: 'üìÑ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                                uri: `${process.env.WEB_BASE_URL}/complaints/${c.id}`,
                            },
                        },
                        {
                            type: 'spacer',
                            size: 'sm',
                        },
                    ],
                },
            },
        };

        await this.pushMessageToUser(c.lineUserId, [userMessage]);

        return { message: '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ group ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' };
    }

    async uploadImageAfter(id: string, file?: Express.Multer.File, message?: string) {
        let imageUrl: string | undefined;

        if (file) {
            const ext = path.extname(file.originalname) || '.jpg';
            const filename = `after-${randomUUID()}${ext}`;
            imageUrl = await this.storageService.uploadImage(file.buffer, filename);
        }

        await this.complaintService.updateImageAfter(id, imageUrl);
        const c = await this.complaintService.findById(id);
        if (!c || !c.lineUserId) return;

        const mapUrl = c.location
            ? `https://www.google.com/maps/search/?api=1&query=${c.location}`
            : 'https://www.google.com/maps';

        const userFlex = {
            type: 'flex',
            altText: 'üìÆ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            contents: {
                type: 'bubble',
                body: {
                    type: 'box',
                    layout: 'vertical',
                    spacing: 'sm',
                    contents: [
                        {
                            type: 'text',
                            text: `üìå ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${c.id.slice(0, 8)}...`,
                            weight: 'bold',
                            size: 'md',
                            wrap: true,
                        },
                        {
                            type: 'text',
                            text: 'üìÆ ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß ‚úÖ',
                            size: 'sm',
                            wrap: true,
                        },
                        ...(message ? [{
                            type: 'text',
                            text: `üìÑ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•: ${message}`,
                            size: 'sm',
                            wrap: true,
                        }] : []),
                        {
                            type: 'button',
                            style: 'link',
                            action: {
                                type: 'uri',
                                label: 'üìç ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà',
                                uri: mapUrl,
                            },
                        },
                    ],
                },
                footer: {
                    type: 'box',
                    layout: 'vertical',
                    spacing: 'sm',
                    contents: [
                        {
                            type: 'button',
                            style: 'primary',
                            action: {
                                type: 'uri',
                                label: 'üìÑ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                                uri: `${process.env.WEB_BASE_URL}/complaints/${c.id}`,
                            },
                        },
                    ],
                },
            },
        };

        await this.pushMessageToUser(c.lineUserId, [userFlex]);

        const resultFlex = {
            type: 'flex',
            altText: `üìå ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ID ${id} ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`,
            contents: {
                type: 'bubble',
                body: {
                    type: 'box',
                    layout: 'vertical',
                    spacing: 'sm',
                    contents: [
                        {
                            type: 'text',
                            text: `üìå ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ID ${id.slice(0, 8)}... ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‚úÖ`,
                            weight: 'bold',
                            wrap: true,
                        },
                        ...(message ? [{
                            type: 'text',
                            text: `üìÑ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•: ${message}`,
                            wrap: true,
                        }] : []),
                    ],
                },
                footer: {
                    type: 'box',
                    layout: 'vertical',
                    contents: [
                        {
                            type: 'button',
                            style: 'primary',
                            action: {
                                type: 'uri',
                                label: 'üìÑ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                                uri: `${process.env.WEB_BASE_URL}/admin/complaints/${c.id}`,
                            },
                        },
                    ],
                },
            },
        };

        await this.pushMessageToGroup(process.env.LINE_GROUP_ID!, [resultFlex]);

        return { message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', ...(imageUrl && { imageUrl }) };
    }

    private async pushMessageToGroup(groupId: string, messages: any[]) {
        await axios.post(
            'https://api.line.me/v2/bot/message/push',
            { to: groupId, messages },
            {
                headers: {
                    Authorization: `Bearer ${process.env.LINE_ACCESS_TOKEN}`,
                    'Content-Type': 'application/json',
                },
            },
        );
    }

    private async pushMessageToUser(userId: string, messages: any[]) {
        await axios.post(
            'https://api.line.me/v2/bot/message/push',
            { to: userId, messages },
            {
                headers: {
                    Authorization: `Bearer ${process.env.LINE_ACCESS_TOKEN}`,
                    'Content-Type': 'application/json',
                },
            },
        );
    }
}